#% text_encoding = iso8859_1
# Copyright (C) GE-Smallworld 2001, all rights reserved.
_package user
_pragma(classify_level=restricted, topic={mit})
##
##  Description:  Miscellaneous development tools
##
_global gpm << _unset
_global v << _unset
_global case_v << _unset
_global dbv << _unset
_global mm  << _unset
_global de_view << _unset
_global tv << _unset 
_global paf << _unset
_global pam << _unset
_global mapa << _unset 
_global mv << _unset 
_global ed << _unset 
_global plugs << _unset
_global at << _unset
_global ae << _unset 
$

$

_global setvars <<
_proc @setvars(_optional print?)

	_global gpm
	_global  v
	
        _if print? _is _unset _then
                print? << _true
        _endif
	
	gpm << gis_program_manager
        _if print?
        _then
                write("gpm << gis_program_manager")
        _endif


	v << gis_program_manager.cached_dataset(:gis)
	
        _if print? _then
                write("v << gpm.cached_dataset(:gis) (", v, ")")
        _endif

        _global case_v
        _if case_v _isnt _unset
        _then
                case_v << gpm.cached_dataset(:case)
                _if print? _then
                        write("case_v << gpm.cached_dataset(:case) (", case_v, ")")
                _endif
        _endif

        _global dbv
        _if v _isnt _unset
        _then
                dbv << v.collections
                _if print? _then
                        write("dbv << v.collections")
                _endif

        _endif
 	_global paf
	# buscamos la primera aplicacion que no es admin si hay mas de una
	
	
	_if (apps << smallworld_product.applications).size > 1 
	_then
		paf << smallworld_product.application(:captura)
	_else
		paf << apps.an_element()
	_endif

	_if print? _then
                write("paf << smallworld_product.application() (", paf , ")")
        _endif

	_global cmap
	_global mv
	_global ed
	_if paf _isnt _unset _andif
	    paf.plugin(:maps) _isnt _unset 
	_then
		cmap << paf.plugin(:maps).current_map
		mv << paf.plugin(:maps).current_map_view
		#ed << paf.plugin(:editor_manager).current_embedded_editor
	_else
		cmap << _unset
		mv << _unset
		ed << _unset
	_endif
	_if print? _then
		write("cmap << paf.plugin(:maps).current_map (", mapa , ")")
		write("mv << paf.plugin(:maps).current_map_view (", mv , ")")
		write("ed << paf.plugin(:editor_manager).current_embedded_editor (", ed , ")")
        _endif

	_global plugs
	_if paf _isnt _unset 
	_then
		plugs << rope.new_from_iter(paf,:plugins|()|)
	_else
		plugs << _unset 
	_endif
	_if print? _then
                write("plugs << paf.plugins() (", plugs , ")")
        _endif

        # CDF If you want your own tweaks loaded, put them into
        # my_globals.magik in your home directory.
	
        _local homedir << system.getenv("home")
        _if homedir _is _unset _then _return _endif
        _local fn << system.pathname_from_components("my_globals.magik", homedir)
        _if system.file_exists?(fn)
        _then
                load_file(fn)
        _endif
_endproc
$
_method object.ap(_gather args)
        >> _self.apropos(_scatter args)
_endmethod
$

_global ap <<
_proc(_gather args)
        >> apropos(_scatter args)
_endproc
$
_method text_output_mixin.writei(_gather things)
	## 
	## Igual que write() mas un newline al final

	_local linea << write_string(things, {newline_char})
	_self.write(_scatter linea)
	
_endmethod
$

