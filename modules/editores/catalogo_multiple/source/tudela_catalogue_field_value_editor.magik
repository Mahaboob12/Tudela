#% text_encoding = iso8859_1

_package user
$

_pragma(classify_level=restricted)
##
def_slotted_exemplar(:tudela_catalogue_field_value_editor,
	{
		{:collection_lister, _unset}
	},
	:text_field_value_editor)
$

_pragma(classify_level=restricted)
_method tudela_catalogue_field_value_editor.build_embedded_gui(a_rowcol)
	##
	## Build the lister in A_ROWCOL
	##

	.text_win << text_window.new(a_rowcol, 10, 60, _unset,
				     :col_alignment, :fill,
				     :row_alignment, :fill,
				     :model, _self,
				     :change_selector, :|text_changed()|,
				     :horizontal_scrollbar?, _false,
				     :identifier, :text_window)
	
	.text_win.editable? << _false
_endmethod
$

_pragma(classify_level=restricted)
_private _method tudela_catalogue_field_value_editor.build_button_panel(a_rowcol)
	##
	## Builds the buttons part of the GUI in A_ROWCOL

	button_size << _self.get_optional_resource(:min_button_width, :integer).default(75)

	rc << rowcol.new(a_rowcol, 1, _unset, :pixel,
			 :style, :button_box,
			 :col_alignment, :right,
			 :outer_spacing, 5)

	b_catalogo << button_item.new(rc, _self.message(:seleccionar),
				      _self, :seleccionar_registros|()|,
				      :min_width, button_size,
				      :identifier, :seleccionar)

	b_aceptar << button_item.new(rc, _self.message(:ok),
				     _self, :|ok()|,
				     :min_width, button_size,
				     :identifier, :ok)

	b_cancelar << button_item.new(rc, _self.message(:cancel),
				      _self, :|quit()|,
				      :min_width, button_size,
				      :identifier, :cancel)

	_self.register_action_buttons(b_catalogo,b_aceptar,b_cancelar)
_endmethod
$

_pragma(classify_level=restricted)
_method tudela_catalogue_field_value_editor.refresh_editor(a_field_item)
	##
	## Set the value of the field using data from A_FIELD_ITEM

	_self.contents << a_field_item.value.default("")
_endmethod
$

_pragma(classify_level=restricted)
_method tudela_catalogue_field_value_editor.seleccionar_registros()
	##
	##

	
_endmethod
$
#_pragma(classify_level=restricted)
#_private _method tudela_catalogue_field_value_editor.send_changes_to_owner()
#	##
#	## Send any changes back to the owner to set as proposed values
#	##
#
#	selected_records << .collection_lister.selected_records
#	
#	_if selected_records.size _isnt 0
#	_then
#		.owner.records_selected( selected_records )
#	_endif
#_endmethod
#$
